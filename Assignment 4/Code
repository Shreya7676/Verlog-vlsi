Design code:
module up_down_counter (
    input clk,
    input reset,
    input up_down,       // 1 = count up, 0 = count down
    output reg [3:0] count
);

    always @(posedge clk or posedge reset) begin
        if (reset)
            count <= 4'b0000;
        else if (up_down)
            count <= count + 1;
        else
            count <= count - 1;
    end

endmodule

test bench:
module tb_up_down_counter;
    reg clk;
    reg reset;
    reg up_down;
    wire [3:0] count;

    // Instantiate counter
    up_down_counter uut (
        .clk(clk),
        .reset(reset),
        .up_down(up_down),
        .count(count)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // 10 time units clock period
    end

    // Stimulus
    initial begin
        $dumpfile("up_down_counter.vcd");
        $dumpvars(0, tb_up_down_counter);

        // Initial values
        reset = 1; up_down = 1; #10;
        reset = 0;

        // Count up
        repeat(10) #10;
        
        // Count down
        up_down = 0;
        repeat(10) #10;

        // Reset
        reset = 1; #10;
        reset = 0;
        
        // Count up again
        up_down = 1;
        repeat(10) #10;

        $finish;
    end
endmodule
